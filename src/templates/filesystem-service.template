/**
 * Filesystem Service
 * Provides file system operations for the MCP server
 */

const fs = require('fs-extra');
const path = require('path');
const EventEmitter = require('events');

class FilesystemService extends EventEmitter {
  constructor(options = {}) {
    super();
    
    this.options = {
      rootDir: process.env.ROOT_DIRECTORY || '{{ROOT_DIRECTORY}}',
      allowRemote: {{ALLOW_REMOTE_ACCESS}},
      maxFileSize: 100 * 1024 * 1024, // 100MB
      ...options
    };
    
    // Ensure the root directory exists
    this.ensureRootDirectory();
    
    // File operation stats
    this.stats = {
      reads: 0,
      writes: 0,
      deletes: 0,
      errors: 0
    };
  }
  
  /**
   * Ensure the root directory exists
   * @private
   */
  ensureRootDirectory() {
    try {
      fs.ensureDirSync(this.options.rootDir);
    } catch (error) {
      throw new Error(`Failed to create root directory: ${error.message}`);
    }
  }
  
  /**
   * Get absolute path from relative path
   * @param {string} relativePath - The relative path
   * @returns {string} - The absolute path
   * @private
   */
  getAbsolutePath(relativePath) {
    // Prevent path traversal
    const normalizedPath = path.normalize(relativePath).replace(/^\.\.\//, '');
    return path.join(this.options.rootDir, normalizedPath);
  }
  
  /**
   * Read a file
   * @param {string} filePath - The relative file path
   * @param {object} options - Read options
   * @returns {object} - The file content and operation result
   */
  async readFile(filePath, options = {}) {
    try {
      this.stats.reads++;
      
      // Get absolute path
      const absolutePath = this.getAbsolutePath(filePath);
      
      // Check if file exists
      if (!(await fs.pathExists(absolutePath))) {
        return {
          success: false,
          error: 'File not found'
        };
      }
      
      // Read the file
      const content = await fs.readFile(absolutePath, options);
      
      // Convert to string if encoding was provided
      const data = options.encoding ? content.toString(options.encoding) : content;
      
      // Emit read event
      this.emit('read', { path: filePath });
      
      return {
        success: true,
        data
      };
    } catch (error) {
      this.stats.errors++;
      
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * Write a file
   * @param {string} filePath - The relative file path
   * @param {string|Buffer} content - The content to write
   * @param {object} options - Write options
   * @returns {object} - Operation result
   */
  async writeFile(filePath, content, options = {}) {
    try {
      this.stats.writes++;
      
      // Get absolute path
      const absolutePath = this.getAbsolutePath(filePath);
      
      // Ensure the directory exists
      await fs.ensureDir(path.dirname(absolutePath));
      
      // Check file size if content is provided
      if (content && content.length > this.options.maxFileSize) {
        return {
          success: false,
          error: 'File size exceeds maximum allowed'
        };
      }
      
      // Write the file
      await fs.writeFile(absolutePath, content, options);
      
      // Emit write event
      this.emit('write', { path: filePath });
      
      return {
        success: true,
        path: filePath
      };
    } catch (error) {
      this.stats.errors++;
      
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * Delete a file
   * @param {string} filePath - The relative file path
   * @returns {object} - Operation result
   */
  async deleteFile(filePath) {
    try {
      this.stats.deletes++;
      
      // Get absolute path
      const absolutePath = this.getAbsolutePath(filePath);
      
      // Check if file exists
      if (!(await fs.pathExists(absolutePath))) {
        return {
          success: false,
          error: 'File not found'
        };
      }
      
      // Delete the file
      await fs.remove(absolutePath);
      
      // Emit delete event
      this.emit('delete', { path: filePath });
      
      return {
        success: true,
        path: filePath
      };
    } catch (error) {
      this.stats.errors++;
      
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * List files in a directory
   * @param {string} directoryPath - The relative directory path
   * @returns {object} - The file list and operation result
   */
  async listFiles(directoryPath = '') {
    try {
      // Get absolute path
      const absolutePath = this.getAbsolutePath(directoryPath);
      
      // Check if directory exists
      if (!(await fs.pathExists(absolutePath))) {
        return {
          success: false,
          error: 'Directory not found'
        };
      }
      
      // Get directory stats to verify it's a directory
      const stats = await fs.stat(absolutePath);
      if (!stats.isDirectory()) {
        return {
          success: false,
          error: 'Path is not a directory'
        };
      }
      
      // Read directory contents
      const files = await fs.readdir(absolutePath);
      
      // Get stats for each file
      const fileList = await Promise.all(
        files.map(async (file) => {
          const filePath = path.join(absolutePath, file);
          const fileStats = await fs.stat(filePath);
          
          return {
            name: file,
            path: path.relative(this.options.rootDir, filePath),
            size: fileStats.size,
            isDirectory: fileStats.isDirectory(),
            created: fileStats.birthtime,
            modified: fileStats.mtime
          };
        })
      );
      
      return {
        success: true,
        files: fileList
      };
    } catch (error) {
      this.stats.errors++;
      
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * Get file stats
   * @param {string} filePath - The relative file path
   * @returns {object} - The file stats and operation result
   */
  async getFileStats(filePath) {
    try {
      // Get absolute path
      const absolutePath = this.getAbsolutePath(filePath);
      
      // Check if file exists
      if (!(await fs.pathExists(absolutePath))) {
        return {
          success: false,
          error: 'File not found'
        };
      }
      
      // Get file stats
      const stats = await fs.stat(absolutePath);
      
      return {
        success: true,
        stats: {
          size: stats.size,
          isDirectory: stats.isDirectory(),
          isFile: stats.isFile(),
          created: stats.birthtime,
          modified: stats.mtime,
          accessed: stats.atime
        }
      };
    } catch (error) {
      this.stats.errors++;
      
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * Get service statistics
   * @returns {object} - Service stats
   */
  getStats() {
    return {
      operations: this.stats,
      rootDirectory: this.options.rootDir,
      allowRemoteAccess: this.options.allowRemote
    };
  }
}

module.exports = { FilesystemService };
